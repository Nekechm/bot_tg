from aiogram import types, Dispatcher
from create_bot import dp, bot,db_conn,db_curr
from keybords.client_kb import kb,op,op1,op4,gen,buy_menu
import dbi
from create_bot import BOT_NAME
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery
import time
import datetime
from pyqiwip2p import QiwiP2P
import datetime, threading, time
from datetime import timedelta

api_key = "eyJ2ZXJzaW9uIjoiUDJQIiwiZGF0YSI6eyJwYXlpbl9tZXJjaGFudF9zaXRlX3VpZCI6Inp1ejJzcy0wMCIsInVzZXJfaWQiOiI3OTAwOTIwNTI2NSIsInNlY3JldCI6IjVjZDI3NjY1Y2NkNjg3NWNiZjg4YzY4OTYyNjdmM2E4MzFkNmFlZDQ5YzI1ZmI4MmZiMjA0YzI1MzIzODhlZDYifX0="
p2p = QiwiP2P(auth_key=api_key)
bill = p2p.bill(amount=1,lifetime=15)



class Gender(StatesGroup):
    gender = State()


@dp.message_handler(commands=['start'],state=None)
async def start_com(message:types.Message):
    user_id = message.from_user.id
    start_command = message.text
    maybe_referrer_id = str(start_command[7:])
    referrer_id: [str,None] = maybe_referrer_id if maybe_referrer_id != '' else None
    await Gender.gender.set()
    await message.answer('–ï—Å–ª–∏ –≤—ã –º—É–∂—á–∏–Ω–∞ –≤–≤–µ–¥–∏—Ç–µ - 1, –∂–µ–Ω—â–∏–Ω–∞ - 2')


    if not dbi.user_exists(db_curr,user_id):
        dbi.add_user(db_curr,user_id, referrer_id)

        if referrer_id == str(user_id):
            await bot.send_message(user_id, "–ù–µ–ª—å–∑—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ")


    db_conn.commit()

    #await message.answer(f'–ë–æ—Ç –≤ —Ä–∞–±–æ—Ç–µ', reply_markup=kb)

@dp.message_handler(state=Gender.gender)
async def process_gender(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    gender = message.text
    men = user_id
    if message.text == '1' in message.text:
        dbi.add_men(db_curr, user_id)
        await state.finish()
        db_conn.commit()
        await message.answer(
            f'–ü—Ä–∏–≤–µ—Ç! –¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –ø—Ä–æ—Ö–æ–¥–∫—É –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª, –∑–∞–¥–∞—Ç—å –Ω–∞–º –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–π—Ç–∏ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã –∏ —Å—Ç–∏–∫–µ—Ä—ã!',reply_markup=kb)
    elif message.text == '2' in message.text:
        dbi.add_girl(db_curr, user_id, gender)
        await state.finish()
        db_conn.commit()
        await message.answer(
            f'–ü—Ä–∏–≤–µ—Ç! –¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –ø—Ä–æ—Ö–æ–¥–∫—É –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª, –∑–∞–¥–∞—Ç—å –Ω–∞–º –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–π—Ç–∏ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã –∏ —Å—Ç–∏–∫–µ—Ä—ã!',
            reply_markup=kb)
    else:
        await message.answer(f'–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ª')

async def sub(message:types.Message):
    await message.answer(f'18+ —Ñ–æ—Ç–æ: https://t.me/+Vk7DjXwzMLYzMmYy\n\n'
                         f'18+ –≤–∏–¥–µ–æ: https://t.me/+XgJOq1GNXuA3ZWQy\n\n'
                         f'18+ —Å—Ç–∏–∫–µ—Ä—ã: https://t.me/addstickers/Porn_private1_bot\n\n'
                         f'–•–µ–Ω—Ç–∞–π —Å—Ç–∏–∫–µ—Ä—ã: https://t.me/addstickers/Porn_private1_bot2\n\n')

async def quiz(message:types.Message, state:Gender):
    await message.answer('–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç—è—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 10 –º–∏–Ω—É—Ç.')



async def oplata(message:types.Message):
    await message.answer(f'–í—ã–±–∏—Ä–∞–π —Ç–∞—Ä–∏—Ñ (–Ω–µ–¥–µ–ª—è –∏–ª–∏ –Ω–∞–≤—Å–µ–≥–¥–∞) –∏ –ø–æ–ª—É—á–∞–π –¥–æ—Å—Ç—É–ø –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª!',reply_markup=op)


@dp.callback_query_handler(text='o1')
async def weak_oplata(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await bot.send_message(chat_id=callback_query.message.chat.id,
                           text=f'–¢–∞—Ä–∏—Ñ:–ù–µ–¥–µ–ª—è - 80 —Ä.\n'
                                f'–°—Ç–æ–∏–º–æ—Å—Ç—å:80üá∑üá∫RUB\n'
                                f'–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:7 –¥–Ω–µ–π\n\n'
                                f'–í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ—Å—É—Ä—Å–∞–º\n'
                                f'-private (–∫–∞–Ω–∞–ª)',reply_markup=buy_menu(url=bill.pay_url,bill=bill.bill_id))

@dp.callback_query_handler(lambda c: c.data.startswith('check_'))
async def check(callback: types.CallbackQuery):
    bill = str(callback.data[6:])
    info = bill
    user_id = callback.from_user.id
    time_sub = int(time.time()) + days_to_seconds(7)
    if str(p2p.check(bill_id=bill).status) == "PAID":
        await bot.send_message(callback.from_user.id, "–í—ã –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—á–µ—Ç")
        dbi.set_time_sub(db_curr, user_id, time_sub)
    if info != False:
        if str(p2p.check(bill_id=bill).status) == "PAID":
            dbi.set_time_sub(db_curr,user_id,time_sub)
            await bot.send_message(callback.from_user.id,"–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞")
        else:
            await bot.send_message(callback.from_user.id,"–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—á–µ—Ç",reply_markup=buy_menu(False,bill=bill))
    else:
        await bot.send_message(callback.from_user.id,"–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")




@dp.callback_query_handler(text='o2')
async def weak_oplata(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await bot.send_message(chat_id=callback_query.message.chat.id,
                           text=f'–¢–∞—Ä–∏—Ñ:–ù–∞–≤—Å–µ–≥–¥–∞ - 100 —Ä.\n'
                                f'–°—Ç–æ–∏–º–æ—Å—Ç—å:100üá∑üá∫RUB\n'
                                f'–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:–±–µ—Å—Å—Ä–æ—á–Ω–æ \n\n'
                                f'–í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ—Å—É—Ä—Å–∞–º\n'
                                f'-private (–∫–∞–Ω–∞–ª)',reply_markup=op4)






@dp.callback_query_handler(text='e')
async def nazad(callback_query: types.CallbackQuery):
    text = (f'–í—ã–±–∏—Ä–∞–π —Ç–∞—Ä–∏—Ñ (–Ω–µ–¥–µ–ª—è –∏–ª–∏ –Ω–∞–≤—Å–µ–≥–¥–∞) –∏ –ø–æ–ª—É—á–∞–π –¥–æ—Å—Ç—É–ø –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª!')
    await callback_query.answer()
    await callback_query.message.edit_text(text,reply_markup=op)

@dp.callback_query_handler(text='end')
async def end(callback_query: types.CallbackQuery):
    text = (f'–¢–∞—Ä–∏—Ñ:–ù–µ–¥–µ–ª—è - 80 —Ä.\n'
            f'–°—Ç–æ–∏–º–æ—Å—Ç—å:80üá∑üá∫RUB\n'
            f'–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:7 –¥–Ω–µ–π\n\n'
            f'–í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ—Å—É—Ä—Å–∞–º\n'
            f'-private (–∫–∞–Ω–∞–ª)')
    await callback_query.message.edit_text(text,reply_markup=op1)


async def ref(message: types.Message):
    ref_count = dbi.count_referals(db_curr, message.from_user.id)
    await bot.send_message(message.from_user.id,f'https://t.me/{BOT_NAME}?start={message.from_user.id}\n'
                                                f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {ref_count}')

def days_to_seconds(days):
    return days * 24 * 60 * 60



def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(sub,text='–ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã –∏ —Å—Ç–∏–∫–µ—Ä—ã')
    dp.register_message_handler(quiz,text='–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å')
    dp.register_message_handler(oplata,text='Private')
    dp.register_message_handler(ref,text='–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞')

